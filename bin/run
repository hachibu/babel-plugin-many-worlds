#!/usr/bin/env node

var _        = require('lodash'),
    babel    = require('@babel/core'),
    plugin   = require('../src/plugin'),
    Universe = require('../src/universe'),
    yargs    = require('yargs');

var argv = yargs
  .usage(
    '$0 <filepath>',
    'Explore the many-worlds interpretation of quantum mechanics and see mistakes you might have made in another universe.',
    (yargs) => yargs.positional('filepath', {
      describe: 'JavaScript filepath.',
      type: 'string',
    })
  )
  .option('recursion-depth', {
    alias: 'd',
    default: 0,
    describe: 'Depth of recursion.',
    type: 'number',
  })
  .argv;

function printResult({ code, name }) {
  console.log(`/* ${name} */`);
  console.log(code, "\n");
}

async function main() {
  var options = {
    plugins: [plugin]
  };

  var u = new Universe();

  u.data = {
    name: 'World 0',
    code: babel.transformFileSync(argv.filepath).code
  };

  function branch(node) {
    var a = new Universe();
    var b = new Universe();

    a.data = {
      name: `${node.data.name} => World ${node.depth}₀`,
      code: babel.transformSync(node.data.code, options).code
    };
    b.data = {
      name: `${node.data.name} => World ${node.depth}₁`,
      code: babel.transformSync(node.data.code, options).code
    };

    node.insert(a);
    node.insert(b);
  }

  var depth = -1;

  while (++depth < argv.recursionDepth) {
    u.each(node => {
      if (node.depth === depth) {
        branch(node);
      }
    });
  }

  u.print();
}

main();
