#!/usr/bin/env node

var _      = require('lodash'),
    babel  = require('@babel/core'),
    plugin = require('../src/plugin'),
    yargs  = require('yargs');

var desc = 'Explore the many-worlds interpretation of quantum mechanics and see mistakes you might have made in another universe.';
var argv = yargs
  .usage('$0 <filepath>', desc, (yargs) => {
    yargs.positional('filepath', {
      describe: 'JavaScript filepath.',
      type: 'string',
    })
  })
  .option('depth', {
    alias: 'd',
    default: 0,
    describe: 'Depth of recursion.',
    type: 'number',
  })
  .argv;

function printResult({ code, id }) {
  console.log(`/* ${id} */`);
  console.log(code, "\n");
}

class Tree {
  constructor() {
    this._children = [];
    this._data = undefined;
    this._depth = 0;
  }

  set data(data) {
    this._data = data;
  }

  get data() {
    return this._data;
  }

  set depth(depth) {
    this._depth = depth;
  }

  get depth() {
    return this._depth;
  }

  insert(tree) {
    tree.depth = this.depth + 1;
    this._children.push(tree);
  }

  each(f) {
    f(this);
    _.each(this._children, (child) => child.each(f));
  }
}

async function main() {
  var options = {
    plugins: [plugin]
  };

  var t = new Tree();

  t.data = {
    code: babel.transformFileSync(argv.filepath, options).code,
    id: 'World 0'
  };

  function branch(node) {
    var a = new Tree();
    var b = new Tree();

    a.data = {
      code: babel.transformSync(node.data.code, options).code,
      id: `${node.data.id} => World ${node.depth}₀`
    };
    b.data = {
      code: babel.transformSync(node.data.code, options).code,
      id: `${node.data.id} => World ${node.depth}₁`
    };

    node.insert(a);
    node.insert(b);
  }

  var depth = -1;

  while (++depth < argv.depth) {
    t.each((node) => {
      if (node.depth === depth) {
        branch(node);
      }
    });
  }

  t.each((node) => {
    printResult(node.data, node.data.id);
  });
}

main();
